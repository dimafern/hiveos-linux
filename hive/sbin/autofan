#!/usr/bin/env bash
source /etc/environment
. colors

gpu_detect_json="/run/hive/gpu-detect.json"
HIVE_GPU_STATS_LOG="/run/hive/gpu-stats.json"

export DISPLAY=":0"

NS='/usr/bin/nvidia-settings'
AUTOFAN_LOG="/var/log/hive-autofan.log"

RIG_CONF="/hive-config/rig.conf"
CONF_FILE="/hive-config/autofan.conf"

MIN_COEF=80
MAX_COEF=110

#settings (autofan.conf file content)
MIN_FAN=40
TARGET_TEMP=
CRITICAL_TEMP=75
NO_AMD=0
#CHANGE_COEF_FLAG=

###
# Log write
function echo2 {
	echo -e "$1" > /dev/tty1
	echo -e "$1" >> $AUTOFAN_LOG
	echo -en "$1"
}


#check $gpu_detect_json and do nothing while not exist
while true; do 
		if [ -f $gpu_detect_json ]; then
			gpu_detect_json=`cat $gpu_detect_json`
			# TODO this block must be refactored to library functions
			amd_indexes_query='[ . | to_entries[] | select(.value.brand == "amd") | .key ]'
			amd_indexes_array=`echo "$gpu_detect_json" | jq -r "$amd_indexes_query | .[]"`
			amd_cards_number=`echo "$gpu_detect_json" | jq -c "$amd_indexes_query | length"`

			nvidia_indexes_query='[ . | to_entries[] | select(.value.brand == "nvidia") | .key ]'
			nvidia_indexes_array=`echo "$gpu_detect_json" | jq -r "$nvidia_indexes_query| .[]"`
			nvidia_cards_number=`echo "$gpu_detect_json" | jq -c "$nvidia_indexes_query | length"`

			# TODO cpus maybe required to use autofans too
			#cpu_indexes_query='[ . | to_entries[] | select(.value.brand == "cpu") | .key ]'
			#cpu_indexes_array=`echo "$gpu_detect_json" | jq -r "$cpu_indexes_query"`
			#cpu_cores_number=`echo "$gpu_detect_json" | jq -c "$cpu_indexes_query | length"`
			declare -a card_bus_ids_array=(`echo "$gpu_detect_json" | jq -r '[ . | to_entries[] | select(.value) | .value.busid ] | .[]'`)
			# TODO There is must be the way to remove space or use the whole value inside the quotes
			#declare -a card_names_array=(`echo "$gpu_detect_json" | jq '[ . | to_entries[] | select(.value) | .value.name ] | .[]'`)
			break
		else
			echo2 "${RED}No $gpu_detect_json file exist${NOCOLOR}\n"
		fi
	sleep 10
done


check_gpu () {

if [[ $nvidia_indexes_array == '[]' && $amd_indexes_array == '[]' ]]; then
	echo2 "No one ${RED}AMD${NOCOLOR} or ${GREEN}NVIDIA${NOCOLOR} cards found\n"
	exit 1
fi
[[ $nvidia_cards_number > 0 ]] && echo2 "You have ${GREEN}NVIDIA${NOCOLOR} GPU's: $nvidia_cards_number\n" && nvidia-smi -pm 1 > /dev/null 2>&1 && $NS -a GPUPowerMizerMode=1 > /dev/null 2>&1
[[ $amd_cards_number > 0 ]] && echo2 "You have ${RED}AMD${NOCOLOR} GPU's: $amd_cards_number\n" 
#check config
if [ ! -f $CONF_FILE ]; then 
	echo2 "${RED}No config $CONF_FILE${NOCOLOR}\n" 
	else 
	. $CONF_FILE
	MIN_TEMP=$(( TARGET_TEMP-5 ))
	echo2 "${PURPLE} TARGET TEMP: $TARGET_TEMP°C\n MINER STOP TEMP: $CRITICAL_TEMP°C${NOCOLOR}\n"
fi
}

get_fan_speed () {

	local temperature=$1
	local temperature_previous=$2
	local gpu_fan_speed=$3
	local gpu_bus_id=$4
	local i=$5

	if [[ $temperature -lt $MIN_TEMP ]]; then
			[[ $CHANGE_COEF_FLAG -ne 1 ]] && CHANGE_COEF_FLAG=0
			target_fan_speed=$(($temperature * ($MIN_COEF-($MIN_TEMP - $temperature) * 2)/100))
			[[ $target_fan_speed -le $MIN_FAN ]] && target_fan_speed=$MIN_FAN
	elif [[ $temperature -ge $MIN_TEMP  &&  $temperature -le $TARGET_TEMP ]]; then
		target_fan_speed=$((  $temperature *(($temperature - $MIN_TEMP) * 4 + $MIN_COEF)/100 ))
				if [[ -n $temperature_previous && $(( $temperature+1 )) -eq $temperature_previous && $TARGET_TEMP -ge $temperature_previous ]]; then
								target_fan_speed=$(( $gpu_fan_speed-1 )) 
				elif [[ -n $temperature_previous && $temperature -eq $temperature_previous ]]; then
							target_fan_speed=$gpu_fan_speed
				fi
	elif [[ $temperature -gt $TARGET_TEMP ]]; then
		CHANGE_COEF_FLAG=1
		target_fan_speed=$(( $temperature *(($temperature - $TARGET_TEMP) * 4 + $MAX_COEF)/100 ))
		
	fi
	[[ $target_fan_speed -gt 100 ]] && target_fan_speed=100  && echo2 "${RED}GPU[$gpu_card_name, $gpu_bus_id]: WARNING: Maximum fan speed!${NOCOLOR}\n"
	#coloring
	echo_temp="$temperature°C"
	[[ $temperature > $TARGET_TEMP ]] && echo_temp="${RED}$temperature°C${NOCOLOR}"
	[[ $temperature < $MIN_TEMP ]] && echo_temp="${BLUE}$temperature°C${NOCOLOR}"
	echo_fan="$target_fan_speed%"
	[[ $target_fan_speed > $gpu_fan_speed ]] && echo_fan="${RED}$target_fan_speed%${NOCOLOR}"
	[[ $target_fan_speed < $gpu_fan_speed ]] && echo_fan="${GREEN}$target_fan_speed%${NOCOLOR}"
	[[ $6 -eq "Nvidia" ]] && gpu_info+="GPU_$i ${GREEN}$6${NOCOLOR} [$gpu_bus_id]: $echo_temp $echo_fan\n" || gpu_info+="GPU_$i$ ${RED}$6${NOCOLOR} [$gpu_bus_id]: $echo_temp $echo_fan\n"
}

###
# What we must to do if temperature reached some limits
event_by_temperature() {

	if [[ ! `screen -ls | grep "miner"` ]]; then  
								local gpu_temp_all
								for gpu_temp_all in ${temperatures_array[@]}
								do 
									if [[ $gpu_temp_all > $MIN_TEMP ]]; then 
											AUTOFAN_MINER=$AUTOFAN_MINER && break
									else AUTOFAN_MINER="miner-start"
									fi
								done
	fi
	[[ $1 -ge $CRITICAL_TEMP ]] && AUTOFAN_MINER="miner-stop" 
}

event_by_temp_limit () {

if [[ $CHANGE_COEF_FLAG == 0 ]]; then
		if [[ `screen -ls | grep "miner"` ]]; then
			if [[ $MIN_COEF > 70 ]]; then
				MIN_COEF=$(( $MIN_COEF-1 )) 
				MAX_COEF=$(( $MAX_COEF-1 ))
				echo2 "${CYAN}Technical info: min=$MIN_COEF max=$MAX_COEF${NOCOLOR}\n"
			fi
		fi
elif [[ $CHANGE_COEF_FLAG == 1 ]]; then
	min_coef_limit=$(( 10100/($TARGET_TEMP+1)-34 ))
	[[ $MIN_COEF -lt $min_coef_limit ]] && MIN_COEF=$(( $MIN_COEF+2 )) && MAX_COEF=$(( $MAX_COEF+2 )) && echo2 "${CYAN}Technical info: min=$MIN_COEF max=$MAX_COEF${NOCOLOR}\n"
fi
CHANGE_COEF_FLAG=
}

action_by_event() {

	case $AUTOFAN_MINER in
		"miner-start")
		[[ ! `screen -ls | grep "miner"` ]] && miner start && echo2 "${GREEN}Miner started ${NOCOLOR}\n"
		[[ -f $RIG_CONF ]] && . $RIG_CONF && [[ $WD_ENABLED==1 ]] && wd start
		;;
		"miner-stop")
		 [[ `screen -ls | grep "miner"` ]] && miner stop && wd stop && echo2 "${RED}Miner stopped ${NOCOLOR}\n"
		;;
	esac
	AUTOFAN_MINER=
}


# TODO merge with amd_auto_fan_control
nvidia_auto_fan_control ()
{
	args=
	for index in ${nvidia_indexes_array[@]}
	do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on nvidia_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		if [[ -z $gpu_temperature_previous ]]; then gpu_temperature_previous=0; fi
		local gpu_fan_speed=${fans_array[index]}
		# TODO broken, spaces trouble
		#local card_name=${card_names_array[index]}
		#local card_name=
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="Nvidia"
		event_by_temperature $gpu_temperature
		#echo -e "GPU:$index T=$gpu_temperature FAN=$gpu_fan_speed%"
		#local TARGET_FAN_SPEED=$(get_fan_speed $gpu_temperature $gpu_temperature_previous $gpu_fan_speed $card_bus_id $card_name)
		get_fan_speed $gpu_temperature $gpu_temperature_previous $gpu_fan_speed $card_bus_id $index $brand
		#not set fan_speed if not changed
		[[ $target_fan_speed -ne $gpu_fan_speed ]] && args+=" -a [gpu:$index]/GPUFanControlState=1 -a [fan:$index]/GPUTargetFanSpeed=$target_fan_speed"
	done
	[[ -n $args ]] && $NS $args > /dev/null 2>&1
}

amd_auto_fan_control ()
{
	for index in ${amd_indexes_array[@]}
	do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on amd_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		if [[ -z $gpu_temperature_previous ]]; then gpu_temperature_previous=0; fi
		local gpu_fan_speed=${fans_array[index]}
		# TODO broken, spaces trouble
		#local card_name=${card_names_array[index]}
		#local card_name=
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="   ADM"
		event_by_temperature $gpu_temperature
		get_fan_speed $gpu_temperature $gpu_temperature_previous $gpu_fan_speed $card_bus_id $index $brand
		#not set fan_speed if not changed
		[[ $target_fan_speed -ne $gpu_fan_speed ]] && wolfamdctrl -i $index --set-fanspeed $target_fan_speed 1>/dev/null
	done
}

auto_fan_control() {

	while true;	do
	[[ -f $CONF_FILE ]] && . $CONF_FILE
		echo2 "${GREEN}$(date +"%Y-%m-%d %T")${NOCOLOR}\n"
		#check if exist .conf
		if [[ -n $TARGET_TEMP && -f $CONF_FILE ]]; then 
			MIN_TEMP=$(( TARGET_TEMP-5 ))
			declare -a temperatures_array=(`cat $HIVE_GPU_STATS_LOG | tail -1 | jq -r ".temp | .[]"`)
			declare -a fans_array=(`cat $HIVE_GPU_STATS_LOG | tail -1 | jq -r ".fan | .[]"`)
			gpu_info=
			if (( $nvidia_cards_number > 0 )); then
				nvidia_auto_fan_control
			fi
			if [[ $amd_cards_number > 0 && $NO_AMD == 0 ]]; then #enable AMD 
				amd_auto_fan_control
			fi
			echo2 "$gpu_info"
			declare -a temperatures_array_previous=(${temperatures_array[@]})
			action_by_event
			event_by_temp_limit
		fi
	sleep 20 
	done
}

case $1 in
	-scr)
		screen -x -S autofan
	;;
	
	*)
	#check double
		screen_count=`screen -ls | grep "\.autofan" | grep -v $PPID | wc -l`
		if [[ $screen_count -gt 0 ]]; then
			echo -e "${RED}Autofan screen is already running${NOCOLOR}\nRun ${CYAN}autofan -scr${NOCOLOR} to resume screen"
			exit 1
		fi
		check_gpu && auto_fan_control
	;;
esac
